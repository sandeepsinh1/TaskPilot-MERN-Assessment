{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rajput\\\\Downloads\\\\TaskPilott\\\\frontend\\\\src\\\\context\\\\TaskContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect, useContext } from 'react';\nimport API from '../api';\nimport { AuthContext } from './AuthContext'; // Import for fetching tasks\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TaskContext = /*#__PURE__*/createContext();\nexport const TaskProvider = ({\n  children\n}) => {\n  _s();\n  // Safely access user from AuthContext to prevent initialization errors\n  const {\n    user\n  } = useContext(AuthContext);\n  const [tasks, setTasks] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchTasks = async () => {\n    if (!user) return; // Only fetch if authenticated\n\n    setLoading(true);\n    setError(null);\n    try {\n      // API call respects user role via backend logic (admin gets all, employee gets assigned)\n      const res = await API.get('/tasks');\n      setTasks(res.data);\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error('Error fetching tasks:', err);\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to fetch tasks.');\n      setTasks([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch tasks whenever the user object changes (e.g., on login/logout)\n  useEffect(() => {\n    fetchTasks();\n  }, [user]);\n\n  // Function to update task status (used by employee)\n  const updateTaskStatus = async (taskId, status) => {\n    try {\n      const res = await API.patch(`/tasks/${taskId}/status`, {\n        status\n      });\n\n      // Update local state to reflect the change immediately\n      setTasks(prevTasks => prevTasks.map(task => task._id === taskId ? {\n        ...task,\n        status: res.data.status\n      } : task));\n      return res.data;\n    } catch (err) {\n      console.error('Error updating task status:', err);\n      throw err;\n    }\n  };\n  const contextValue = {\n    tasks,\n    loading,\n    error,\n    fetchTasks,\n    updateTaskStatus,\n    setTasks // Useful for admin task creation\n  };\n  return /*#__PURE__*/_jsxDEV(TaskContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(TaskProvider, \"kbcWG4tsKFuCzpSjKdjZSpLE1IE=\");\n_c = TaskProvider;\nvar _c;\n$RefreshReg$(_c, \"TaskProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useContext","API","AuthContext","jsxDEV","_jsxDEV","TaskContext","TaskProvider","children","_s","user","tasks","setTasks","loading","setLoading","error","setError","fetchTasks","res","get","data","err","_err$response","_err$response$data","console","response","message","updateTaskStatus","taskId","status","patch","prevTasks","map","task","_id","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Rajput/Downloads/TaskPilott/frontend/src/context/TaskContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useContext } from 'react';\r\nimport API from '../api';\r\nimport { AuthContext } from './AuthContext'; // Import for fetching tasks\r\n\r\nexport const TaskContext = createContext();\r\n\r\nexport const TaskProvider = ({ children }) => {\r\n  // Safely access user from AuthContext to prevent initialization errors\r\n  const { user } = useContext(AuthContext); \r\n  const [tasks, setTasks] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchTasks = async () => {\r\n    if (!user) return; // Only fetch if authenticated\r\n\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      // API call respects user role via backend logic (admin gets all, employee gets assigned)\r\n      const res = await API.get('/tasks');\r\n      setTasks(res.data);\r\n    } catch (err) {\r\n      console.error('Error fetching tasks:', err);\r\n      setError(err.response?.data?.message || 'Failed to fetch tasks.');\r\n      setTasks([]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch tasks whenever the user object changes (e.g., on login/logout)\r\n  useEffect(() => {\r\n    fetchTasks();\r\n  }, [user]); \r\n\r\n  // Function to update task status (used by employee)\r\n  const updateTaskStatus = async (taskId, status) => {\r\n    try {\r\n        const res = await API.patch(`/tasks/${taskId}/status`, { status });\r\n        \r\n        // Update local state to reflect the change immediately\r\n        setTasks(prevTasks => \r\n            prevTasks.map(task => task._id === taskId ? { ...task, status: res.data.status } : task)\r\n        );\r\n        return res.data;\r\n    } catch (err) {\r\n        console.error('Error updating task status:', err);\r\n        throw err;\r\n    }\r\n  };\r\n\r\n\r\n  const contextValue = {\r\n    tasks,\r\n    loading,\r\n    error,\r\n    fetchTasks,\r\n    updateTaskStatus,\r\n    setTasks, // Useful for admin task creation\r\n  };\r\n\r\n  return (\r\n    <TaskContext.Provider value={contextValue}>\r\n      {children}\r\n    </TaskContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}